{
g<-100
}
g<- 200
func()
print(g)
sum<-0
for(i in c(1,2)) {
j<-i+1
for (k in c(j:4))
{
sum<-sum+i
}
}
print(sum)
reticulate::repl_python()
import numpy as np
quit()
quit
ls
Sys.getenv(RETICULATE_PYTHON)
?Sys.getenv
Sys.getenv
Sys.getenv()
reticulate::repl_python()
import numpy as np
"some" + "some"
paste0("some", "some")
paste0("three", "some")
seq(0, pi, 0.001)
ts <- seq(0, pi, 0.001)
Uts<-sqrt(2)*100*sin(ts)
plot(ts,Uts)
abline(a=mean(Uts), b=0, col="blue")
ts <- seq(0, 2*pi, 0.001)
Uts<-sqrt(2)*100*sin(ts)
plot(ts,Uts)
abline(a=mean(Uts), b=0, col="blue")
library(reshape)
country<-data.frame(c("A","B","C"),c(100,200,120),c(2000,7000,15000))
colnames(country)<- c("countries","population_in_million","gdp_percapita")
country
country_w_to_L = melt(country,  id = c("countries"))
country_w_to_L
g <- function(x) {
a <- 3
x+a+y
}
g(2)
require("devtools")
devtools::install_github("gabmorg/labelme", build_vignettes = TRUE)
install.packages('taipan')
library(taipan)
library(shiny)
questions <- taipanQuestions(
scene = sliderInput("quality", label = "Image Quality",
min = 0, max = 10, value = 5),
selection = div(
radioButtons("hotdog", label = "Hotdog?",
choices = list("Hotdog", "Not hotdog")),
checkboxGroupInput("extra", label = "Condiments",
choices = list("Onion", "Tomato (Ketchup)", "Barbeque", "Mustard"))
)
)
buildTaipan(
questions = questions,
images = c("https://raw.githubusercontent.com/srkobakian/taipan/master/sample_images/hotdog.jpg",
"https://raw.githubusercontent.com/srkobakian/taipan/master/sample_images/not_hotdog.jpg"),
appdir = file.path(tempdir(), "taipan"), overwrite = TRUE
)
buildTaipan(
questions = questions,
images = c("https://raw.githubusercontent.com/srkobakian/taipan/master/sample_images/hotdog.jpg",
"https://raw.githubusercontent.com/srkobakian/taipan/master/sample_images/not_hotdog.jpg"),
appdir = file.path(tempdir(), "taipan"), overwrite = TRUE
)
Uts=50
ts<-seq(0,2*pi,0.001)
Uts<-sqrt(2)*100*sin(ts)
plot(
Uts=50
ts<-seq(0,2*pi,0.001)
Uts<-sqrt(2)*100*sin(ts)
plot(ts,Uts)
abline(Uts=50)
abline(h=50)
library(ggplot)
library(ggplot2)
wt<-seq(0, 30, by = 0.01)
v1<-(0.5-0.5*cos(wt))
v2<-(0.5*cos(wt))
ggplot() +
geom_point(mapping = aes(x = wt, y = v1),colour = "red", size = 1) +
geom_point(mapping = aes(x = wt, y = v2),colour = "blue", size = 1) +
geom_line()
v3<- 0.5
ggplot() +
geom_point(mapping = aes(x = wt, y = v1),colour = "red", size = 1) +
geom_point(mapping = aes(x = wt, y = v2),colour = "blue", size = 1) +
geom_line(mapping = aes(x = wt, y = v3),colour = "green", size = 1)
reticulate::repl_python()
import os
library(reticulate)
py_install("json")
reticulate::repl_python()
import json
import yaml
import collections
import PIL
import pycocotools
import cv2
import numpy
quit
py_install("yaml")
py_install("pycocotools")
py_install("cv2")
dp <- .Alias(dplyr)
dplyr
library(sf)
library(dplyr)
library(readxl)
read.csv("C:/Users/batuh/Downloads/WKT.csv")
polies <- read.csv("C:/Users/batuh/Downloads/WKT.csv")
View(polies)
polies <- read_excel("C:/Users/batuh/Downloads/WKT.csv")
polies <- read_excel("C:/Users/batuh/Downloads/WKT.csv", header = TRUE)
polies <- read.csv("C:/Users/batuh/Downloads/WKT.csv", header = TRUE)
polies <- data.table::fread("C:/Users/batuh/Downloads/WKT.csv")
View(polies)
polies <- data.table::fread("C:/Users/batuh/Downloads/WKT.csv", encoding = "UTF-8")
View(polies)
polies %>% filter(Il_Adi == "Şanlıurfa")
polies <- data.table::fread("C:/Users/batuh/Downloads/WKT.csv", encoding = "UTF-8")
# Set System Locale to Turkish for Turkish characters
Sys.setlocale(locale = "Turkish")
polies <- data.table::fread("C:/Users/batuh/Downloads/WKT.csv", encoding = "UTF-8")
polies %>% filter(Il_Adi == "Şanlıurfa")
polies %>% filter(CityName == "Şanlıurfa")
polies %>% filter(CityName == "Şanlıurfa" && PlaceName == "Ulaklı")
polies %>% filter(CityName == "Şanlıurfa" && PlaceName == "Süleymaniye")
polies %>% filter(CityName == "Şanlıurfa" & PlaceName == "Süleymaniye")
c(0.1)
percent_columns <- c("GrainPercentP3", "SilagePercentP3")
!!(dplyr::sym(percent_columns))
!!(dplyr::sym(percent_columns[[1]]))
percent_columns[[1]]
class(percent_columns[[1]])
percent_column <- percent_columns[[1]]
!!(dplyr::sym(percent_columns))
!!(dplyr::sym(percent_column))
dplyr::sym(percent_column)
"Vector_BOLU_v04.gpkg"
vector_scope <- "AF_BOLU_2020_v04.gpkg"
string_list <- stringr::str_split(vector_scope, "_")[[1]]
string_list[[1]]
# Initial Vector Version Number
version_number <- stringr::str_extract(vector_scope, "v[0-9]*")
# Output Name
output_name <- paste0(string_list[[1]], "_",
string_list[[2]], "_",
string_list[[3]], "_",
version_number)
period_string <- "P3"
# Output Name
output_name <- paste0(string_list[[1]], "_",
string_list[[2]], "_",
period_string,
string_list[[3]], "_",
"CORN",
version_number)
GrainClassP3 <- c(TRUE, FALSE, FALSE, TRUE, FALSE)
SilageClassP3 <- c(FALSE, FALSE, TRUE, TRUE, FALSE)
FieldId <- c(11, 12, 13, 14, 15)
output_sf <- c(FieldId, GrainClassP3, SilageClassP3, stringsAsFactors = FALSE)
output_sf <- data.frame(FieldId, GrainClassP3, SilageClassP3, stringsAsFactors = FALSE)
View(output_sf)
# Detect Class Columns
class_columns <- c()
for(i in class_list) {
class_column <- paste0(i, "Class", period_string)
class_columns %<>% append(class_column)
}
class_list = c("Grain", "Silage")
# Detect Class Columns
class_columns <- c()
for(i in class_list) {
class_column <- paste0(i, "Class", period_string)
class_columns %<>% append(class_column)
}
library(magrittr)
for(i in class_list) {
class_column <- paste0(i, "Class", period_string)
class_columns %<>% append(class_column)
}
# Class Cols
class_col1 <- class_columns[[1]]
class_col2 <- class_columns[[2]]
# Split Class
output_sxxx %<>% dplyr::filter(!!(dplyr::sym(class_col1)) || !!(dplyr::sym(class_col2)))
# Split Class
output_sf %<>% dplyr::filter(!!(dplyr::sym(class_col1)) || !!(dplyr::sym(class_col2)))
View(output_sf)
# Split Class
output_sf %<>% dplyr::filter(!!(dplyr::sym(class_col1)) | !!(dplyr::sym(class_col2)))
View(output_sf)
### TEST MATERIAL
vector_list <- c("AF_ADANA_2020_v01.gpkg",
"AF_ADANA_2020_v02.gpkg",
"AF_KONYA_2020_v01.gpkg",
"AF_KONYA_2020_v01.gpkg",
"AF_KONYA_2020_v03.gpkg",
"AF_GAZIANTEP_2020_v01.gpkg",
"AF_GAZIANTEP_2020_v01.gpkg",
"AF_GAZIANTEP_2020_v02.gpkg",
"AF_GAZIANTEP_2020_v03.gpkg",
"AF_GAZIANTEP_2020_v04.gpkg")
# Remove version numbers
vector_list %<>% purrr::map(~ stringr::str_split(.x, "_")[[1]] %>% utils::tail(n = 1))
View(vector_list)
# Remove version numbers
remove_version <- function(file_name){
rm_string <- purrr::map(file_name, ~ stringr::str_split(.x, "_")[[1]] %>% utils::tail(n = 1))
removed_file <- file_name %>%
stringr::str_remove(rm_string)
}
vector_list %<>% purrr::map_chr(~ remove_version(.x))
### TEST MATERIAL
vector_list <- c("AF_ADANA_2020_v01.gpkg",
"AF_ADANA_2020_v02.gpkg",
"AF_KONYA_2020_v01.gpkg",
"AF_KONYA_2020_v01.gpkg",
"AF_KONYA_2020_v03.gpkg",
"AF_GAZIANTEP_2020_v01.gpkg",
"AF_GAZIANTEP_2020_v01.gpkg",
"AF_GAZIANTEP_2020_v02.gpkg",
"AF_GAZIANTEP_2020_v03.gpkg",
"AF_GAZIANTEP_2020_v04.gpkg")
vector_list %<>% purrr::map_chr(~ remove_version(.x))
vector_list[[1]]
purrr::map(vector_list[[1]], ~ stringr::str_split(.x, "_")[[1]] %>% utils::tail(n = 1))
rm_string <- file_name %>% stringr::str_split("_")[[1]] %>%
utils::tail(n = 1))
rm_string <- file_name %>%
stringr::str_split("_")[[1]] %>%
utils::tail(n = 1)
# Remove version numbers
remove_version <- function(file_name){
rm_string <- file_name %>%
stringr::str_split("_")[[1]] %>%
utils::tail(n = 1)
removed_file <- file_name %>%
stringr::str_remove(rm_string)
}
vector_list %<>% purrr::map_chr(~ remove_version(.x))
file_name <- vector_list[[1]]
rm_string <- file_name %>%
stringr::str_split("_")[[1]] %>%
utils::tail(n = 1)
rm_string <- file_name %>%
stringr::str_split(pattern = "_")[[1]] %>%
utils::tail(n = 1)
rm_string <-  stringr::str_split(file_name, "_")[[1]] %>%
utils::tail(n = 1)
removed_file <- file_name %>%
stringr::str_remove(rm_string)
# Remove version numbers
remove_version <- function(file_name){
rm_string <-  stringr::str_split(file_name, "_")[[1]] %>%
utils::tail(n = 1)
removed_file <- file_name %>%
stringr::str_remove(rm_string)
}
vector_list %<>% purrr::map_chr(~ remove_version(.x))
vector_list
# Find Duplicates
dupl_bool <- duplicated(vector_list)
# Find Cities with more than one files
dupl_list <- vector_list %>% dplyr::filter(duplicated(vector_list))
# Create Frame for lists
vector_df <- data.frame(vector_list, dupl_bool)
View(vector_df)
# Find Duplicates
dupl_bool <- duplicated(vector_list, fromLast = TRUE)
# Create Frame for lists
vector_df <- data.frame(vector_list, dupl_bool)
View(vector_df)
### TEST MATERIAL
vector_list <- c("AF_ADANA_2020_v01.gpkg",
"AF_ADANA_2020_v02.gpkg",
"AF_KONYA_2020_v01.gpkg",
"AF_KONYA_2020_v01.gpkg",
"AF_KONYA_2020_v03.gpkg",
"AF_GAZIANTEP_2020_v01.gpkg",
"AF_GAZIANTEP_2020_v01.gpkg",
"AF_GAZIANTEP_2020_v02.gpkg",
"AF_GAZIANTEP_2020_v03.gpkg",
"AF_GAZIANTEP_2020_v04.gpkg",
"AF_AYDIN_2020_v02.gpkg")
vector_list %<>% purrr::map_chr(~ remove_version(.x))
# Find Duplicates
dupl_bool <- duplicated(vector_list, fromLast = TRUE)
# Create Frame for lists
vector_df <- data.frame(vector_list, dupl_bool)
View(vector_df)
### TEST MATERIAL
vector_list <- c("AF_ADANA_2020_v01.gpkg",
"AF_ADANA_2020_v02.gpkg",
"AF_KONYA_2020_v01.gpkg",
"AF_KONYA_2020_v01.gpkg",
"AF_KONYA_2020_v03.gpkg",
"AF_GAZIANTEP_2020_v01.gpkg",
"AF_GAZIANTEP_2020_v01.gpkg",
"AF_GAZIANTEP_2020_v02.gpkg",
"AF_GAZIANTEP_2020_v03.gpkg",
"AF_GAZIANTEP_2020_v04.gpkg",
"AF_AYDIN_2020_v02.gpkg")
# Create Frame for lists
vector_df <- data.frame(vector_list, dupl_bool)
View(vector_df)
# Remove older versions from the frame
vector_df %<>% dplyr::filter(dupl_bool == FALSE)
View(vector_df)
# Create Frame for lists
vector_df <- data.frame(vector_list, dupl_bool)
# Remove older versions from the frame
vector_df %<>% dplyr::filter(dupl_bool == TRUE)
vector_df$vector_list
reticulate::repl_python()
from pulp import *
import numpy as np
import pandas as pd
import re
import matplotlib.pyplot as plt
from IPython.display import Image
%matplotlib inline
py_install("pulp")
quit
py_install("pulp")
reticulate::py_install("pulp")
reticulate::py_install("IPython")
reticulate::repl_python()
from pulp import *
import numpy as np
import pandas as pd
import re
import matplotlib.pyplot as plt
from IPython.display import Image
%matplotlib inline
#Reading Books
"""
Example of the optimization problem. If you want to read maximum amount of bestsellers, which books should you order?
For example you can read only 5 hours/week. How many books can you read per year
**Assuming that average speed of reading The average reader snails through prose at a rate of about
250-300 words per minute, which roughly equates to about one page per minute, we assume 60 pages/ hour is the regular speed.
**Another definition of the problem is to achieve max rating.
"""
from pulp import *
import numpy as np
import pandas as pd
import re
#write a scaper before hand
data = pd.read_csv('goodreads_bestsellers.csv')
data = pd.read_csv('C:/Users/batuh/Documents/GitHub/optimizersgoodreads_bestsellers.csv')
data = pd.read_csv('C:/Users/batuh/Documents/GitHub/optimizers/goodreads_bestsellers.csv')
data = pd.read_csv('C:/Users/batuh/Documents/GitHub/optimizers/goodreads_bestsellers.csv', encoding = 'utf-8)
data = pd.read_csv('C:/Users/batuh/Documents/GitHub/optimizers/goodreads_bestsellers.csv', encoding = 'utf-8')
data = pd.read_csv('C:/Users/batuh/Documents/GitHub/optimizers/goodreads_bestsellers.csv', encoding = 'latin1')
View(data)
problem_name = 'BuyingBestsellers'
hours_week_read = 5
pages_per_hour = 60
# create the LP object, set up as a maximization problem --> since we want to maximize the number of books we read in a year
prob = pulp.LpProblem(problem_name, pulp.LpMaximize)
prob = pulp.LpProblem(problem_name, pulp.LpMaximize)
from pulp import *
import numpy as np
import pandas as pd
import re
prob = pulp.LpProblem(problem_name, pulp.LpMaximize)
setwd("C:/Users/batuh/Documents/GitHub/doktar-opt/ExampleLPPProgram/scenarios")
tuik_data <- readr::read_csv("TuikDefault_District.csv")
tuik_data
library(magrittr)
dplyr::group_by(CityId, CityName) %>%
dplyr::summarise_all(sum, na.rm = TRUE))
tuik_data %<>%
dplyr::select(-c(DistrictId, DistrictName)) %>%
dplyr::group_by(CityId, CityName) %>%
dplyr::summarise_all(sum, na.rm = TRUE))
tuik_data %<>%
dplyr::select(-c(DistrictId, DistrictName)) %>%
dplyr::group_by(CityId, CityName) %>%
dplyr::summarise_all(sum, na.rm = TRUE)
tuik_data
data.table::fwrite(tuik_data, "TuikDefault_City.csv", bom = TRUE)
View(tuik_data)
tuik_data %<>%
dplyr::summarise_all(syni na.rm = TRUE)
tuik_data %<>%
dplyr::summarise_all(sum, na.rm = TRUE)
tuik_data %<>%
dplyr::select(-c(CityId, CityName)) %>%
dplyr::summarise_all(sum, na.rm = TRUE)
tuik_data
library(magrittr)
setwd("C:/Users/batuh/Documents/GitHub/doktar-opt/ExampleLPPProgram/scenarios")
tuik_data <- readr::read_csv("TuikDefault_District.csv")
tuik_data %<>%
dplyr::select(-c(DistrictId, DistrictName)) %>%
dplyr::group_by(CityId, CityName) %>%
dplyr::summarise_all(sum, na.rm = TRUE)
tuik_data %<>% rowSums()
tuik_data %>% rowSums()
tuik_data %>%
dplyr::select(-c(CityId, CityName)) %>%
rowSums()
cbind(tuik_data, total = rowSums(tuik_data))
cbind(tuik_data, total = rowSums(tuik_data[[-c(CityId, CityName)]]))
cbind(tuik_data, total = rowSums(tuik_data[[-c("CityId", "CityName")]]))
tuik_data %<>%
dplyr::select(-c(CityId, CityName))
tuik_data
total <- tuik_data %>%
dplyr::select(-c(CityId, CityName)) %>%
rowSums()
library(magrittr)
setwd("C:/Users/batuh/Documents/GitHub/doktar-opt/ExampleLPPProgram/scenarios")
tuik_data <- readr::read_csv("TuikDefault_District.csv")
tuik_data %<>%
dplyr::select(-c(DistrictId, DistrictName)) %>%
dplyr::group_by(CityId, CityName) %>%
dplyr::summarise_all(sum, na.rm = TRUE)
total <- tuik_data %>%
dplyr::select(-c(CityId, CityName)) %>%
rowSums()
tuik_data %<>% rbind(total)
total
library(janitor)
library(janitor)
setwd("C:/Users/batuh/Documents/GitHub/doktar-opt/ExampleLPPProgram/scenarios")
tuik_data <- readr::read_csv("TuikDefault_District.csv")
tuik_data %<>%
dplyr::select(-c(DistrictId, DistrictName)) %>%
dplyr::group_by(CityId, CityName) %>%
dplyr::summarise_all(sum, na.rm = TRUE)
tuik_data %<>%
adorn_totals("row")
View(tuik_data)
tuik_data %<>%
adorn_totals("row") %>%
dplyr::filter(CityId=="Total")
library(janitor)
setwd("C:/Users/batuh/Documents/GitHub/doktar-opt/ExampleLPPProgram/scenarios")
tuik_data <- readr::read_csv("TuikDefault_District.csv")
tuik_data %<>%
dplyr::select(-c(DistrictId, DistrictName)) %>%
dplyr::group_by(CityId, CityName) %>%
dplyr::summarise_all(sum, na.rm = TRUE)
tuik_data %<>%
adorn_totals("row") %>%
dplyr::filter(CityId=="Total")
View(tuik_data)
library(janitor)
setwd("C:/Users/batuh/Documents/GitHub/doktar-opt/ExampleLPPProgram/scenarios")
tuik_data <- readr::read_csv("TuikDefault_District.csv")
tuik_data %<>%
dplyr::select(-c(DistrictId, DistrictName)) %>%
dplyr::group_by(CityId, CityName) %>%
dplyr::summarise_all(sum, na.rm = TRUE)
tuik_data %<>%
adorn_totals("row") %>%
dplyr::filter(CityId=="Total") %>%
dplyr::mutate(CountryId = CityId,
CountryName = CityName)
View(tuik_data)
library(janitor)
setwd("C:/Users/batuh/Documents/GitHub/doktar-opt/ExampleLPPProgram/scenarios")
tuik_data <- readr::read_csv("TuikDefault_District.csv")
tuik_data %<>%
dplyr::select(-c(DistrictId, DistrictName)) %>%
dplyr::group_by(CityId, CityName) %>%
dplyr::summarise_all(sum, na.rm = TRUE)
(CountryName = "Turkey")
library(janitor)
setwd("C:/Users/batuh/Documents/GitHub/doktar-opt/ExampleLPPProgram/scenarios")
tuik_data <- readr::read_csv("TuikDefault_District.csv")
tuik_data %<>%
dplyr::select(-c(DistrictId, DistrictName)) %>%
dplyr::group_by(CityId, CityName) %>%
dplyr::summarise_all(sum, na.rm = TRUE)
tuik_data %<>%
adorn_totals("row") %>%
dplyr::filter(CityId=="Total") %>%
dplyr::rename(CountryId = CityId,
CountryName = CityName) %>%
dplyr::mutate(CountryName := "Turkey")
tuik_data
setwd("C:/Users/batuh/Documents/GitHub/doktar-opt/ExampleLPPProgram/scenarios")
tuik_data <- readr::read_csv("TuikDefault_District.csv")
tuik_data %<>%
dplyr::select(-c(DistrictId, DistrictName)) %>%
dplyr::group_by(CityId, CityName) %>%
dplyr::summarise_all(sum, na.rm = TRUE)
tuik_data %<>%
adorn_totals("row") %>%
dplyr::filter(CityId=="Total") %>%
dplyr::rename(CountryId = CityId,
CountryName = CityName) %>%
dplyr::mutate(CountryName := "Turkey",
CountryId := 1)
View(tuik_data)
data.table::fwrite(tuik_data, "TuikDefault_Country.csv", bom = TRUE)
