sf_output <- qgisprocess::qgis_output(qgis_result, "OUTPUT") %>% sf::read_sf()
colnames(sf_output)
# New Column List
column_new <- c("CityId", "DistrictId",
"CityNameTr", "DistrictNameTr",
"CityNameEng", "DistrictNameEng",
"FieldId", "IrrigationId", "FieldArea", "WheatPercent",
"BarleyPercent", "SunflowerPercent",
"RicePercent", "LentilPercent", "ChickpeaPercent",
"CottonPercent", "SugarbeetPercent",
"SoybeanPercent", "PeanutPercent", "OatPercent",
"PotatoPercent", "CornPercent", "CanolaPercent", "OnionPercent",
"BeanPercent", "TomatoPercent", "geom")
city_data %<>% dplyr::select(column_new)
sf_output %<>% dplyr::select(column_new)
# Write Result
sf::write_sf(sf_output, paste0(vector_dest, "/", output_name), layer_options = "GEOMETRY=AS_WKT")
city_data
sf::st_crs(city_data) <- 4326
city_data
# Column List
columns_old <- c("Field_Id", "area", "nonirrigated", "irrigated", "Bugday_yield", "Arpa_yield", "Aycicegi_yield",
"celtik_yield", "Mercimek_yield", "Nohut_yield", "Pamuk_yield", "sekerpancari_yield",
"SoyaFasulyesi_yield", "Yerfistigi_yield", "Yulaf_yield",
"Patates_yield", "Misir_yield", "Kanola_yield", "Sogan_yield",
"Fasulye_yield", "Domates_yield")
# Filter City
city_data %<>% dplyr::select(all_of(columns_old))
# Create Irrigation Id
city_data$IrrigationId <- 1
city_data %<>% dplyr::mutate(IrrigationId = dplyr::if_else(nonirrigated == "True", 0, 1))
# Drop Irrigation Columns
city_data %<>% dplyr::select(-c(irrigated, nonirrigated))
# Renamed Column List
column_new <- c("FieldId", "FieldArea", "WheatPercent", "BarleyPercent", "SunflowerPercent",
"RicePercent", "LentilPercent", "ChickpeaPercent", "CottonPercent", "SugarbeetPercent",
"SoybeanPercent", "PeanutPercent", "OatPercent",
"PotatoPercent", "CornPercent", "CanolaPercent", "OnionPercent",
"BeanPercent", "TomatoPercent", "geometry", "IrrigationId")
# Rename Columns
colnames(city_data) <- column_new
# Convert Id to integer
city_data$FieldId <- as.integer(city_data$FieldId)
# Convert data type
city_data %<>%
dplyr::mutate(dplyr::across(where(is.character), as.double))
# Convert Percentage
convert_percent <- function(column){(column + 100) / 100}
percent_columns <- city_data %>%
dplyr::select(contains("Percent")) %>%
colnames()
city_data %<>%
dplyr::mutate_at(dplyr::all_of(percent_columns), convert_percent)
# Change Lentil - Chickpea - Canola
city_data %<>% dplyr::mutate(LentilPercent = dplyr::if_else(IrrigationId == 1, LentilPercent + 0.15, LentilPercent + 0.75))
city_data %<>% dplyr::mutate(ChickpeaPercent = dplyr::if_else(IrrigationId == 1, ChickpeaPercent + 0.15, ChickpeaPercent + 0.8))
city_data %<>% dplyr::mutate(CanolaPercent = dplyr::if_else(IrrigationId == 1, CanolaPercent, CanolaPercent + 0.6))
# Run Spatial Join with QGIS
qgis_result <- qgisprocess::qgis_run_algorithm("native:joinattributesbylocation",
INPUT = city_data,
JOIN = paste0(join_hs, "/", join_hn),
PREDICATE = c(0, 1, 2, 3, 4, 5, 6),
JOIN_FIELDS = c("CityId", "DistrictId",
"CityNameTr", "DistrictNameTr",
"CityNameEng", "DistrictNameEng"),
METHOD = 1,
.quiet = TRUE)
# Transfer result to sf object
sf_output <- qgisprocess::qgis_output(qgis_result, "OUTPUT") %>% sf::read_sf()
# New Column List
column_new <- c("CityId", "DistrictId",
"CityNameTr", "DistrictNameTr",
"CityNameEng", "DistrictNameEng",
"FieldId", "IrrigationId", "FieldArea", "WheatPercent",
"BarleyPercent", "SunflowerPercent",
"RicePercent", "LentilPercent", "ChickpeaPercent",
"CottonPercent", "SugarbeetPercent",
"SoybeanPercent", "PeanutPercent", "OatPercent",
"PotatoPercent", "CornPercent", "CanolaPercent", "OnionPercent",
"BeanPercent", "TomatoPercent", "geometry")
sf_output %<>% dplyr::select(column_new)
# New Column List
column_new <- c("CityId", "DistrictId",
"CityNameTr", "DistrictNameTr",
"CityNameEng", "DistrictNameEng",
"FieldId", "IrrigationId", "FieldArea", "WheatPercent",
"BarleyPercent", "SunflowerPercent",
"RicePercent", "LentilPercent", "ChickpeaPercent",
"CottonPercent", "SugarbeetPercent",
"SoybeanPercent", "PeanutPercent", "OatPercent",
"PotatoPercent", "CornPercent", "CanolaPercent", "OnionPercent",
"BeanPercent", "TomatoPercent", "geom")
sf_output %<>% dplyr::select(column_new)
sf_output
join_tb
city_data
sf::st_crs(city_data) <- 4326
city_data
city_data
# Column List
columns_old <- c("Field_Id", "area", "nonirrigated", "irrigated", "Bugday_yield", "Arpa_yield", "Aycicegi_yield",
"celtik_yield", "Mercimek_yield", "Nohut_yield", "Pamuk_yield", "sekerpancari_yield",
"SoyaFasulyesi_yield", "Yerfistigi_yield", "Yulaf_yield",
"Patates_yield", "Misir_yield", "Kanola_yield", "Sogan_yield",
"Fasulye_yield", "Domates_yield")
# Filter City
city_data %<>% dplyr::select(all_of(columns_old))
# Create Irrigation Id
city_data$IrrigationId <- 1
city_data %<>% dplyr::mutate(IrrigationId = dplyr::if_else(nonirrigated == "True", 0, 1))
# Drop Irrigation Columns
city_data %<>% dplyr::select(-c(irrigated, nonirrigated))
# Renamed Column List
column_new <- c("FieldId", "FieldArea", "WheatPercent", "BarleyPercent", "SunflowerPercent",
"RicePercent", "LentilPercent", "ChickpeaPercent", "CottonPercent", "SugarbeetPercent",
"SoybeanPercent", "PeanutPercent", "OatPercent",
"PotatoPercent", "CornPercent", "CanolaPercent", "OnionPercent",
"BeanPercent", "TomatoPercent", "geometry", "IrrigationId")
# Read Parcel Data
city_data <- sf::read_sf(paste0(vector_source, "/", vector_name)) %>% sf::st_as_sf(wkt = "geometry")
sf::st_crs(city_data) <- 4326
# Column List
columns_old <- c("Field_Id", "area", "nonirrigated", "irrigated", "Bugday_yield", "Arpa_yield", "Aycicegi_yield",
"celtik_yield", "Mercimek_yield", "Nohut_yield", "Pamuk_yield", "sekerpancari_yield",
"SoyaFasulyesi_yield", "Yerfistigi_yield", "Yulaf_yield",
"Patates_yield", "Misir_yield", "Kanola_yield", "Sogan_yield",
"Fasulye_yield", "Domates_yield")
# Filter City
city_data %<>% dplyr::select(all_of(columns_old))
# Create Irrigation Id
city_data$IrrigationId <- 1
city_data %<>% dplyr::mutate(IrrigationId = dplyr::if_else(nonirrigated == "True", 0, 1))
# Drop Irrigation Columns
city_data %<>% dplyr::select(-c(irrigated, nonirrigated))
# Renamed Column List
column_new <- c("FieldId", "FieldArea", "WheatPercent", "BarleyPercent", "SunflowerPercent",
"RicePercent", "LentilPercent", "ChickpeaPercent", "CottonPercent", "SugarbeetPercent",
"SoybeanPercent", "PeanutPercent", "OatPercent",
"PotatoPercent", "CornPercent", "CanolaPercent", "OnionPercent",
"BeanPercent", "TomatoPercent", "geometry", "IrrigationId")
# Rename Columns
colnames(city_data) <- column_new
# Convert Id to integer
city_data$FieldId <- as.integer(city_data$FieldId)
# Convert data type
city_data %<>%
dplyr::mutate(dplyr::across(where(is.character), as.double))
# Convert Percentage
convert_percent <- function(column){(column + 100) / 100}
percent_columns <- city_data %>%
dplyr::select(contains("Percent")) %>%
colnames()
city_data %<>%
dplyr::mutate_at(dplyr::all_of(percent_columns), convert_percent)
# Change Lentil - Chickpea - Canola
city_data %<>% dplyr::mutate(LentilPercent = dplyr::if_else(IrrigationId == 1, LentilPercent + 0.15, LentilPercent + 0.75))
city_data %<>% dplyr::mutate(ChickpeaPercent = dplyr::if_else(IrrigationId == 1, ChickpeaPercent + 0.15, ChickpeaPercent + 0.8))
city_data %<>% dplyr::mutate(CanolaPercent = dplyr::if_else(IrrigationId == 1, CanolaPercent, CanolaPercent + 0.6))
city_data
# Read Parcel Data
city_data <- sf::read_sf(paste0(vector_source, "/", vector_name)) %>% sf::st_as_sf(wkt = "geometry")
sf::st_crs(city_data) <- 4326
# Column List
columns_old <- c("Field_Id", "area", "nonirrigated", "irrigated", "Bugday_yield", "Arpa_yield", "Aycicegi_yield",
"celtik_yield", "Mercimek_yield", "Nohut_yield", "Pamuk_yield", "sekerpancari_yield",
"SoyaFasulyesi_yield", "Yerfistigi_yield", "Yulaf_yield",
"Patates_yield", "Misir_yield", "Kanola_yield", "Sogan_yield",
"Fasulye_yield", "Domates_yield")
city_data
# Read Parcel Data
city_data <- sf::read_sf(paste0(vector_source, "/", vector_name)) %>% sf::st_as_sf(wkt = "geometry")
sf::st_crs(city_data) <- 4326
# Column List
columns_old <- c("Field_Id", "area", "nonirrigated", "irrigated", "Bugday_yield", "Arpa_yield", "Aycicegi_yield",
"celtik_yield", "Mercimek_yield", "Nohut_yield", "Pamuk_yield", "sekerpancari_yield",
"SoyaFasulyesi_yield", "Yerfistigi_yield", "Yulaf_yield",
"Patates_yield", "Misir_yield", "Kanola_yield", "Sogan_yield",
"Fasulye_yield", "Domates_yield", "geometry")
# Filter City
city_data %<>% dplyr::select(all_of(columns_old))
city_data$geometry
# Create Irrigation Id
city_data$IrrigationId <- 1
city_data %<>% dplyr::mutate(IrrigationId = dplyr::if_else(nonirrigated == "True", 0, 1))
# Drop Irrigation Columns
city_data %<>% dplyr::select(-c(irrigated, nonirrigated))
# Renamed Column List
column_new <- c("FieldId", "FieldArea", "WheatPercent", "BarleyPercent", "SunflowerPercent",
"RicePercent", "LentilPercent", "ChickpeaPercent", "CottonPercent", "SugarbeetPercent",
"SoybeanPercent", "PeanutPercent", "OatPercent",
"PotatoPercent", "CornPercent", "CanolaPercent", "OnionPercent",
"BeanPercent", "TomatoPercent", "geometry", "IrrigationId")
city_data
# Rename Columns
colnames(city_data) <- column_new
city_data
# Convert Id to integer
city_data$FieldId <- as.integer(city_data$FieldId)
# Convert data type
city_data %<>%
dplyr::mutate(dplyr::across(where(is.character), as.double))
city_data
# Convert Percentage
convert_percent <- function(column){(column + 100) / 100}
percent_columns <- city_data %>%
dplyr::select(contains("Percent")) %>%
colnames()
city_data %<>%
dplyr::mutate_at(dplyr::all_of(percent_columns), convert_percent)
# Change Lentil - Chickpea - Canola
city_data %<>% dplyr::mutate(LentilPercent = dplyr::if_else(IrrigationId == 1, LentilPercent + 0.15, LentilPercent + 0.75))
city_data %<>% dplyr::mutate(ChickpeaPercent = dplyr::if_else(IrrigationId == 1, ChickpeaPercent + 0.15, ChickpeaPercent + 0.8))
city_data %<>% dplyr::mutate(CanolaPercent = dplyr::if_else(IrrigationId == 1, CanolaPercent, CanolaPercent + 0.6))
city_data
city_data$geometry
percent_columns
percent_columns <- percent_columns[-1]
percent_columns
percent_columns <- city_data %>%
dplyr::select(contains("Percent")) %>%
colnames()
class(percent_columns)
percent_columns <- percent_columns[-length(percent_columns)]
percent_columns
# Read Parcel Data
city_data <- sf::read_sf(paste0(vector_source, "/", vector_name)) %>% sf::st_as_sf(wkt = "geometry")
sf::st_crs(city_data) <- 4326
# Column List
columns_old <- c("Field_Id", "area", "nonirrigated", "irrigated", "Bugday_yield", "Arpa_yield", "Aycicegi_yield",
"celtik_yield", "Mercimek_yield", "Nohut_yield", "Pamuk_yield", "sekerpancari_yield",
"SoyaFasulyesi_yield", "Yerfistigi_yield", "Yulaf_yield",
"Patates_yield", "Misir_yield", "Kanola_yield", "Sogan_yield",
"Fasulye_yield", "Domates_yield", "geometry")
# Filter City
city_data %<>% dplyr::select(all_of(columns_old))
# Create Irrigation Id
city_data$IrrigationId <- 1
city_data %<>% dplyr::mutate(IrrigationId = dplyr::if_else(nonirrigated == "True", 0, 1))
# Drop Irrigation Columns
city_data %<>% dplyr::select(-c(irrigated, nonirrigated))
# Renamed Column List
column_new <- c("FieldId", "FieldArea", "WheatPercent", "BarleyPercent", "SunflowerPercent",
"RicePercent", "LentilPercent", "ChickpeaPercent", "CottonPercent", "SugarbeetPercent",
"SoybeanPercent", "PeanutPercent", "OatPercent",
"PotatoPercent", "CornPercent", "CanolaPercent", "OnionPercent",
"BeanPercent", "TomatoPercent", "geometry", "IrrigationId")
# Rename Columns
colnames(city_data) <- column_new
# Convert Id to integer
city_data$FieldId <- as.integer(city_data$FieldId)
# Convert data type
city_data %<>%
dplyr::mutate(dplyr::across(where(is.character), as.double))
# Convert Percentage
convert_percent <- function(column){(column + 100) / 100}
percent_columns <- city_data %>%
dplyr::select(contains("Percent")) %>%
colnames() # detect Percent columns
percent_columns <- percent_columns[-length(percent_columns)] # drop geometry
city_data %<>%
dplyr::mutate_at(dplyr::all_of(percent_columns), convert_percent) # apply function
city_data
# Change Lentil - Chickpea - Canola
city_data %<>% dplyr::mutate(LentilPercent = dplyr::if_else(IrrigationId == 1, LentilPercent + 0.15, LentilPercent + 0.75))
city_data %<>% dplyr::mutate(ChickpeaPercent = dplyr::if_else(IrrigationId == 1, ChickpeaPercent + 0.15, ChickpeaPercent + 0.8))
city_data %<>% dplyr::mutate(CanolaPercent = dplyr::if_else(IrrigationId == 1, CanolaPercent, CanolaPercent + 0.6))
city_data
city_data$geometry
# Run Spatial Join with QGIS
qgis_result <- qgisprocess::qgis_run_algorithm("native:joinattributesbylocation",
INPUT = city_data,
JOIN = paste0(join_hs, "/", join_hn),
PREDICATE = c(0, 1, 2, 3, 4, 5, 6),
JOIN_FIELDS = c("CityId", "DistrictId",
"CityNameTr", "DistrictNameTr",
"CityNameEng", "DistrictNameEng"),
METHOD = 1,
.quiet = TRUE)
# Transfer result to sf object
sf_output <- qgisprocess::qgis_output(qgis_result, "OUTPUT") %>% sf::read_sf()
# New Column List
column_new <- c("CityId", "DistrictId",
"CityNameTr", "DistrictNameTr",
"CityNameEng", "DistrictNameEng",
"FieldId", "IrrigationId", "FieldArea", "WheatPercent",
"BarleyPercent", "SunflowerPercent",
"RicePercent", "LentilPercent", "ChickpeaPercent",
"CottonPercent", "SugarbeetPercent",
"SoybeanPercent", "PeanutPercent", "OatPercent",
"PotatoPercent", "CornPercent", "CanolaPercent", "OnionPercent",
"BeanPercent", "TomatoPercent", "geom")
sf_output %<>% dplyr::select(column_new)
# Write Result
sf::write_sf(sf_output, paste0(vector_dest, "/", output_name), layer_options = "GEOMETRY=AS_WKT")
# TS  -> TKGM Source
# HS  -> HGM Source
# TN  -> TKGM Name
# HN  -> HGM Name
# Improvement List:
# Produce a report of operations:
#  - file names
#  - parameters
#  - specific notes
# Check Here: https://easystats.github.io/report/
# Define Program Root Directory
root <- "/home/ziya/Desktop"
# Load Functions
source(paste0(root, "/gitHub/doktar-opt/ExampleLPPProgram/R/iterators/city_base_iterator.R"))
source(paste0(root, "/gitHub/doktar-opt/ExampleLPPProgram/R/functions/prepare_base.R"))
# Directories
join_hs <- "/home/ziya/Desktop/gitHub/common-files/Administrative/Turkey/GPKG"
join_hn <- "Turkey_Administrative_L2.gpkg"
# Set System Locale to Turkish for Turkish characters
Sys.setlocale(locale = "Turkish")
# Get City List
city_list <- "/home/ziya/Desktop/BOUNDARY/TURKEY/2020/AGRICULTURAL/PRODUCTION/PROJECTION_INFO.csv" %>%
data.table::fread() %>%
dplyr::pull(City)
# Get Vector List
vector_list <- list.files(paste0(root, "/DoktarVolume/optimizasyon/yield_calculation"), ".csv$")
# Plan Multi-session
future::plan("multisession")
# Specify Corn Raster
furrr::future_map(city_list, ~ city_base_iterator(city_name = .x,
vector_list = vector_list,
vector_source = paste0(root, "/DoktarVolume/optimizasyon/yield_calculation"),
vector_dest = "/media/ziya/disk2/SATELLITE/Optimization/Parcels/base",
join_hs = join_hs,
join_hn = join_hn))
# TS  -> TKGM Source
# HS  -> HGM Source
# TN  -> TKGM Name
# HN  -> HGM Name
# Improvement List:
# Produce a report of operations:
#  - file names
#  - parameters
#  - specific notes
# Check Here: https://easystats.github.io/report/
# Define Program Root Directory
root <- "/home/ziya/Desktop"
# Load Functions
source(paste0(root, "/gitHub/doktar-opt/ExampleLPPProgram/R/iterators/city_base_iterator.R"))
source(paste0(root, "/gitHub/doktar-opt/ExampleLPPProgram/R/functions/prepare_base.R"))
# Directories
join_hs <- "/home/ziya/Desktop/gitHub/common-files/Administrative/Turkey/SHP"
join_hn <- "Turkey_Administrative_L2.shp"
# Set System Locale to Turkish for Turkish characters
Sys.setlocale(locale = "Turkish")
# Get City List
city_list <- "/home/ziya/Desktop/BOUNDARY/TURKEY/2020/AGRICULTURAL/PRODUCTION/PROJECTION_INFO.csv" %>%
data.table::fread() %>%
dplyr::pull(City)
# Get Vector List
vector_list <- list.files(paste0(root, "/DoktarVolume/optimizasyon/yield_calculation"), ".csv$")
# Plan Multi-session
future::plan("multisession")
# Specify Corn Raster
furrr::future_map(city_list, ~ city_base_iterator(city_name = .x,
vector_list = vector_list,
vector_source = paste0(root, "/DoktarVolume/optimizasyon/yield_calculation"),
vector_dest = "/media/ziya/disk2/SATELLITE/Optimization/Parcels/base",
join_hs = join_hs,
join_hn = join_hn))
city_name = "ADANA"
vector_list = c("ADANA_parsel.csv",
"BOLU_v04.csv")
# Find Vector that match with city_name
vector_scope <- vector_list %>% as.data.frame() %>%
dplyr::filter(stringr::str_detect(., paste0(city_name, "_"))) %>%
dplyr::pull(.) %>%
as.character()
# Read Join Table
join_tb <- sf::read_sf(paste0(join_hs, "/", join_hn))
# Get CityId
city_id <- join_tb %>% as.data.frame() %>%
dplyr::filter(CityNameEn == city_name) %>%
dplyr::select(CityId) %>%
dplyr::pull(.) %>%
as.character() %>%
unique()
# Prepare Output Name
output_name <- paste0("DoktarVariableBase_", city_id, ".csv")
# Extract Result
vector_name = vector_scope
# Read Parcel Data
city_data <- sf::read_sf(paste0(vector_source, "/", vector_name)) %>% sf::st_as_sf(wkt = "geometry")
sf::st_crs(city_data) <- 4326
# Column List
columns_old <- c("Field_Id", "area", "nonirrigated", "irrigated", "Bugday_yield", "Arpa_yield", "Aycicegi_yield",
"celtik_yield", "Mercimek_yield", "Nohut_yield", "Pamuk_yield", "sekerpancari_yield",
"SoyaFasulyesi_yield", "Yerfistigi_yield", "Yulaf_yield",
"Patates_yield", "Misir_yield", "Kanola_yield", "Sogan_yield",
"Fasulye_yield", "Domates_yield", "geometry")
vector_source = paste0(root, "/DoktarVolume/optimizasyon/yield_calculation")
vector_dest = "/media/ziya/disk2/SATELLITE/Optimization/Parcels/base"
# Read Parcel Data
city_data <- sf::read_sf(paste0(vector_source, "/", vector_name)) %>% sf::st_as_sf(wkt = "geometry")
sf::st_crs(city_data) <- 4326
# Column List
columns_old <- c("Field_Id", "area", "nonirrigated", "irrigated", "Bugday_yield", "Arpa_yield", "Aycicegi_yield",
"celtik_yield", "Mercimek_yield", "Nohut_yield", "Pamuk_yield", "sekerpancari_yield",
"SoyaFasulyesi_yield", "Yerfistigi_yield", "Yulaf_yield",
"Patates_yield", "Misir_yield", "Kanola_yield", "Sogan_yield",
"Fasulye_yield", "Domates_yield", "geometry")
# Filter City
city_data %<>% dplyr::select(all_of(columns_old))
# Create Irrigation Id
city_data$IrrigationId <- 1
city_data %<>% dplyr::mutate(IrrigationId = dplyr::if_else(nonirrigated == "True", 0, 1))
# Drop Irrigation Columns
city_data %<>% dplyr::select(-c(irrigated, nonirrigated))
colnames(city_data)
# Renamed Column List
column_new <- c("FieldId", "FieldArea", "WheatPercent", "BarleyPercent", "SunflowerPercent",
"RicePercent", "LentilPercent", "ChickpeaPercent", "CottonPercent", "SugarbeetPercent",
"SoybeanPercent", "PeanutPercent", "OatPercent",
"PotatoPercent", "CornPercent", "CanolaPercent", "OnionPercent",
"BeanPercent", "TomatoPercent", "geometry", "IrrigationId")
# Rename Columns
colnames(city_data) <- column_new
# Convert Id to integer
city_data$FieldId <- as.integer(city_data$FieldId)
# Convert data type
city_data %<>%
dplyr::mutate(dplyr::across(where(is.character), as.double))
# Convert Percentage
convert_percent <- function(column){(column + 100) / 100}
percent_columns <- city_data %>%
dplyr::select(contains("Percent")) %>%
colnames() # detect Percent columns
percent_columns
percent_columns <- percent_columns[-length(percent_columns)] # drop geometry
city_data %<>%
dplyr::mutate_at(dplyr::all_of(percent_columns), convert_percent) # apply function
# Change Lentil - Chickpea - Canola
city_data %<>% dplyr::mutate(LentilPercent = dplyr::if_else(IrrigationId == 1, LentilPercent + 0.15, LentilPercent + 0.75))
city_data %<>% dplyr::mutate(ChickpeaPercent = dplyr::if_else(IrrigationId == 1, ChickpeaPercent + 0.15, ChickpeaPercent + 0.8))
city_data %<>% dplyr::mutate(CanolaPercent = dplyr::if_else(IrrigationId == 1, CanolaPercent, CanolaPercent + 0.6))
city_data
# Run Spatial Join with QGIS
qgis_result <- qgisprocess::qgis_run_algorithm("native:joinattributesbylocation",
INPUT = city_data,
JOIN = paste0(join_hs, "/", join_hn),
PREDICATE = c(0, 1, 2, 3, 4, 5, 6),
JOIN_FIELDS = c("CityId", "DistrictId",
"CityNameTr", "DistrictNa"),
METHOD = 1,
.quiet = TRUE)
# Transfer result to sf object
sf_output <- qgisprocess::qgis_output(qgis_result, "OUTPUT") %>% sf::read_sf()
# Old Column List
column_old <- c("CityId", "DistrictId",
"CityNameTr", "DistrictNa",
"FieldId", "IrrigationId", "FieldArea", "WheatPercent",
"BarleyPercent", "SunflowerPercent",
"RicePercent", "LentilPercent", "ChickpeaPercent",
"CottonPercent", "SugarbeetPercent",
"SoybeanPercent", "PeanutPercent", "OatPercent",
"PotatoPercent", "CornPercent", "CanolaPercent", "OnionPercent",
"BeanPercent", "TomatoPercent", "geom")
# Select Columns
sf_output %<>% dplyr::select(column_new)
# New Column List
column_new <- c("CityId", "DistrictId",
"CityName", "DistrictName",
"FieldId", "IrrigationId", "FieldArea", "WheatPercent",
"BarleyPercent", "SunflowerPercent",
"RicePercent", "LentilPercent", "ChickpeaPercent",
"CottonPercent", "SugarbeetPercent",
"SoybeanPercent", "PeanutPercent", "OatPercent",
"PotatoPercent", "CornPercent", "CanolaPercent", "OnionPercent",
"BeanPercent", "TomatoPercent", "geom")
# Rename Columns
colnames(sf_output) <- column_new
# Write Result
sf::write_sf(sf_output, paste0(vector_dest, "/", output_name), layer_options = "GEOMETRY=AS_WKT")
# TS  -> TKGM Source
# HS  -> HGM Source
# TN  -> TKGM Name
# HN  -> HGM Name
# Improvement List:
# Produce a report of operations:
#  - file names
#  - parameters
#  - specific notes
# Check Here: https://easystats.github.io/report/
# Define Program Root Directory
root <- "/home/ziya/Desktop"
# Load Functions
source(paste0(root, "/gitHub/doktar-opt/ExampleLPPProgram/R/iterators/city_base_iterator.R"))
source(paste0(root, "/gitHub/doktar-opt/ExampleLPPProgram/R/functions/prepare_base.R"))
# Directories
join_hs <- "/home/ziya/Desktop/gitHub/common-files/Administrative/Turkey/SHP"
join_hn <- "Turkey_Administrative_L2.shp"
# Set System Locale to Turkish for Turkish characters
Sys.setlocale(locale = "Turkish")
# Get City List
city_list <- "/home/ziya/Desktop/BOUNDARY/TURKEY/2020/AGRICULTURAL/PRODUCTION/PROJECTION_INFO.csv" %>%
data.table::fread() %>%
dplyr::pull(City)
# Get Vector List
vector_list <- list.files(paste0(root, "/DoktarVolume/optimizasyon/yield_calculation"), ".csv$")
# Plan Multi-session
future::plan("multisession")
# Specify Corn Raster
furrr::future_map(city_list, ~ city_base_iterator(city_name = .x,
vector_list = vector_list,
vector_source = paste0(root, "/DoktarVolume/optimizasyon/yield_calculation"),
vector_dest = "/media/ziya/disk2/SATELLITE/Optimization/Parcels/base",
join_hs = join_hs,
join_hn = join_hn))
